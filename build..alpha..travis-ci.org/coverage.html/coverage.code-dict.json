{"/home/travis/build/npmtest/node-npmtest-j/test.js":"/* istanbul instrument in package npmtest_j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-j/lib.npmtest_j.js":"/* istanbul instrument in package npmtest_j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_j = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_j = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-j/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-j && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_j\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_j.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_j.rollup.js'] =\n            local.assetsDict['/assets.npmtest_j.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_j.__dirname + '/lib.npmtest_j.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-j/node_modules/j/j.js":"/* j -- (C) 2013-present  SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*jshint node:true, eqnull:true */\nvar XLSX = require('xlsx');\nvar XLS = XLSX;\nvar HARB = require('harb');\nvar UTILS = XLSX.utils;\n\nvar libs = [\n\t[\"XLS\", XLS],\n\t[\"XLSX\", XLSX],\n\t[\"HARB\", HARB]\n];\n\nvar fs = require('fs');\n\nvar is_xlsx = function(d) {\n\tswitch(d[0]) {\n\t\t/* CFB container */\n\t\tcase 0xd0: return true;\n\t\t/* XML container (assumed 2003/2004) */\n\t\tcase 0x3c: return true;\n\t\t/* BIFF */\n\t\tcase 0x09: return true;\n\t\t/* Zip container or plaintext */\n\t\tcase 0x50: return (d[1] == 0x4b && d[2] <= 0x10 && d[3] <= 0x10);\n\t\t/* Unknown */\n\t\tdefault: return false;\n\t}\n}\nvar readFileSync = function(filename, options) {\n\tvar f = fs.readFileSync(filename);\n\tif(is_xlsx(f)) return [XLSX, XLSX.readFile(filename, options)];\n\telse return [HARB, HARB.readFile(filename, options)];\n};\n\nvar read = function(data, options) {\n\tif(is_xlsx(data)) return [XLSX, XLSX.read(data, options)];\n\telse return [HARB, HARB.read(data.toString(), options)];\n};\n\nfunction to_formulae(w) {\n\tvar XL = w[0], workbook = w[1];\n\tif(!XL.utils.get_formulae) XL = XLSX;\n\tvar result = {};\n\tworkbook.SheetNames.forEach(function(sheetName) {\n\t\tvar f = XL.utils.get_formulae(workbook.Sheets[sheetName]);\n\t\tif(f.length > 0) result[sheetName] = f;\n\t});\n\treturn result;\n}\n\nfunction to_json(w, raw) {\n\tvar XL = w[0], workbook = w[1];\n\tif(!XL.utils.sheet_to_row_object_array) XL = XLSX;\n\tvar result = {};\n\tworkbook.SheetNames.forEach(function(sheetName) {\n\t\tvar roa = XL.utils.sheet_to_row_object_array(workbook.Sheets[sheetName], typeof raw == \"object\" ? raw : {raw:raw});\n\t\tif(roa.length > 0) result[sheetName] = roa;\n\t});\n\treturn result;\n}\n\nfunction to_dsv(w, FS, RS) {\n\tvar XL = w[0], workbook = w[1];\n\tif(!XL.utils.make_csv) XL = XLSX;\n\tvar result = {};\n\tworkbook.SheetNames.forEach(function(sheetName) {\n\t\tvar csv = XL.utils.make_csv(workbook.Sheets[sheetName], {FS:FS||\",\",RS:RS||\"\\n\"});\n\t\tif(csv.length > 0) result[sheetName] = csv;\n\t});\n\treturn result;\n}\n\nfunction get_cols(sheet, XL) {\n\tvar val, r, hdr, R, C, _XL = XL || XLS;\n\tif(!_XL.utils.format_cell) _XL = XLSX;\n\thdr = [];\n\tif(!sheet[\"!ref\"]) return hdr;\n\tr = _XL.utils.decode_range(sheet[\"!ref\"]);\n\tfor (R = r.s.r, C = r.s.c; C <= r.e.c; ++C) {\n\t\tval = sheet[_XL.utils.encode_cell({c:C, r:R})];\n\t\tif(val == null) continue;\n\t\thdr[C] = val.w !== undefined ? val.w : _XL.utils.format_cell ? _XL.utils.format_cell(val) : val.v;\n\t}\n\treturn hdr;\n}\n\nfunction to_md(w) {\n\tvar XL = w[0], wb = w[1];\n\tif(!XL.utils.format_cell) XL = XLSX;\n\tvar tbl = {};\n\twb.SheetNames.forEach(function(sheet) {\n\t\tvar ws = wb.Sheets[sheet];\n\t\tif(ws[\"!ref\"] == null) return;\n\t\tvar src = \"|\", val, w;\n\t\tvar range = XL.utils.decode_range(ws[\"!ref\"]);\n\t\tvar R = range.s.r, C;\n\t\tfor(C = range.s.c; C <= range.e.c; ++C) {\n\t\t\tval = ws[XL.utils.encode_cell({c:C,r:R})];\n\t\t\tw = val == null ? \"\" : val.w !== undefined ? val.w : XL.utils.format_cell ? XL.utils.format_cell(val) : val.v;\n\t\t\tsrc += w + \"|\";\n\t\t}\n\t\tsrc += \"\\n|\";\n\t\tfor(C = range.s.c; C <= range.e.c; ++C) {\n\t\t\tval = ws[XL.utils.encode_cell({c:C,r:R})];\n\t\t\tw = val == null ? \"\" : val.w !== undefined ? val.w : XL.utils.format_cell ? XL.utils.format_cell(val) : val.v;\n\t\t\tsrc += \" ---- |\";\n\t\t}\n\t\tsrc += \"\\n\";\n\t\tfor(R = range.s.r+1; R <= range.e.r; ++R) {\n\t\t\tsrc += \"|\";\n\t\t\tfor(C = range.s.c; C <= range.e.c; ++C) {\n\t\t\t\tval = ws[XL.utils.encode_cell({c:C,r:R})];\n\t\t\t\tw = val == null ? \"\" : val.w !== undefined ? val.w : XL.utils.format_cell ? XL.utils.format_cell(val) : val.v;\n\t\t\t\tsrc += w + \"|\";\n\t\t\t}\n\t\t\tsrc += \"\\n\";\n\t\t}\n\t\ttbl[sheet] = src;\n\t});\n\treturn tbl;\n}\n\nfunction to_html(w) {\n\tvar XL = w[0], wb = w[1];\n\tif(!XL.utils.format_cell) XL = XLSX;\n\tvar tbl = {};\n\twb.SheetNames.forEach(function(sheet) {\n\t\tvar ws = wb.Sheets[sheet];\n\t\tif(ws[\"!ref\"] == null) return;\n\t\tvar src = \"<h3>\" + sheet + \"</h3>\";\n\t\tvar range = XL.utils.decode_range(ws[\"!ref\"]);\n\t\tsrc += \"<table>\";\n\t\tsrc += \"<colgroup span=\\\"\" + (range.e.c - range.s.c + 1) + \"\\\"></colgroup>\";\n\t\tfor(var R = range.s.r; R <= range.e.r; ++R) {\n\t\t\tsrc += \"<tr>\";\n\t\t\tfor(var C = range.s.c; C <= range.e.c; ++C) {\n\t\t\t\tvar val = ws[XL.utils.encode_cell({c:C,r:R})];\n\t\t\t\tvar w = val == null ? \"\" : val.w !== undefined ? val.w : XL.utils.format_cell ? XL.utils.format_cell(val) : val.v;\n\t\t\t\tsrc += \"<td>\" + w + \"</td>\";\n\t\t\t}\n\t\t\tsrc += \"</tr>\";\n\t\t}\n\t\tsrc += \"</table>\";\n\t\ttbl[sheet] = src;\n\t});\n\treturn tbl;\n}\n\nfunction to_html_cols(w) {\n\tvar XL = w[0], wb = w[1];\n\tvar json = to_json(w);\n\tvar tbl = {};\n\twb.SheetNames.forEach(function(sheet) {\n\t\tvar cols = get_cols(wb.Sheets[sheet], XL);\n\t\tvar src = \"<h3>\" + sheet + \"</h3>\";\n\t\tsrc += \"<table>\";\n\t\tsrc += \"<thead><tr>\";\n\t\tcols.forEach(function(c) { src += \"<th>\" + (c !== undefined ? c : \"\") + \"</th>\"; });\n\t\tsrc += \"</tr></thead>\";\n\t\t(json[sheet]||[]).forEach(function(row) {\n\t\t\tsrc += \"<tr>\";\n\t\t\tcols.forEach(function(c) { src += \"<td>\" + (row[c] !== undefined ? row[c] : \"\") + \"</td>\"; });\n\t\t\tsrc += \"</tr>\";\n\t\t});\n\t\tsrc += \"</table>\";\n\t\ttbl[sheet] = src;\n\t});\n\treturn tbl;\n}\n\nvar encodings = {\n\t'&quot;': '\"',\n\t'&apos;': \"'\",\n\t'&gt;': '>',\n\t'&lt;': '<',\n\t'&amp;': '&'\n};\nfunction evert(obj) {\n\tvar o = {};\n\tObject.keys(obj).forEach(function(k) { if(obj.hasOwnProperty(k)) o[obj[k]] = k; });\n\treturn o;\n}\nvar rencoding = evert(encodings);\nvar rencstr = \"&<>'\\\"\".split(\"\");\nfunction escapexml(text){\n\tvar s = text + '';\n\trencstr.forEach(function(y){s=s.replace(new RegExp(y,'g'), rencoding[y]);});\n\treturn s;\n}\n\nvar cleanregex = /[^A-Za-z0-9_.:]/g;\nfunction to_xml(w) {\n\tvar json = to_json(w);\n\tvar lst = {};\n\tw[1].SheetNames.forEach(function(sheet) {\n\t\tvar js = json[sheet], s = sheet.replace(cleanregex,\"\").replace(/^([0-9])/,\"_$1\");\n\t\tvar xml = \"\";\n\t\txml += \"<\" + s + \">\";\n\t\t(js||[]).forEach(function(r) {\n\t\t\txml += \"<\" + s + \"Data>\";\n\t\t\tfor(var y in r) if(r.hasOwnProperty(y)) xml += \"<\" + y.replace(cleanregex,\"\").replace(/^([0-9])/,\"_$1\") + \">\" + escapexml(r[y]) + \"</\" +  y.replace(cleanregex,\"\").replace(/^([0-9])/,\"_$1\") + \">\";\n\t\t\txml += \"</\" + s + \"Data>\";\n\t\t});\n\t\txml += \"</\" + s + \">\";\n\t\tlst[sheet] = xml;\n\t});\n\treturn lst;\n}\n\nfunction to_xlsx_factory(t) {\n\treturn function(w, o) {\n\t\to = o || {}; o.bookType = t;\n\t\tif(o.bookSST === undefined) o.bookSST = true;\n\t\tif(o.type === undefined) o.type = 'buffer';\n\t\treturn XLSX.write(w[1], o);\n\t};\n}\n\nvar to_xlsx = to_xlsx_factory('xlsx');\nvar to_xlsm = to_xlsx_factory('xlsm');\nvar to_xlsb = to_xlsx_factory('xlsb');\nvar to_ods = to_xlsx_factory('ods');\nvar to_fods = to_xlsx_factory('fods');\nvar to_biff2 = to_xlsx_factory('biff2');\n\nfunction to_harb_factory(t) {\n\treturn function (w) {\n\t\tvar workbook = w[1];\n\t\tvar result = {};\n\t\tworkbook.SheetNames.forEach(function(sheetName) {\n\t\t\tvar out = HARB.utils[\"sheet_to_\" + t](workbook.Sheets[sheetName]);\n\t\t\tresult[sheetName] = out;\n\t\t});\n\t\treturn result;\n\t};\n}\n\nvar to_dif = to_harb_factory('dif');\nvar to_sylk = to_harb_factory('sylk');\nvar to_socialcalc = to_harb_factory('socialcalc');\n\n\nvar version = libs.map(function(x) { return x[0] + \" \" + x[1].version; }).join(\" ; \");\n\nvar utils = {\n\tto_csv: to_dsv,\n\tto_dsv: to_dsv,\n\tto_xml: to_xml,\n\tto_xlsx: to_xlsx,\n\tto_xlsm: to_xlsm,\n\tto_xlsb: to_xlsb,\n\tto_ods: to_ods,\n\tto_fods: to_fods,\n\tto_biff2: to_biff2,\n\tto_json: to_json,\n\tto_html: to_html,\n\tto_html_cols: to_html_cols,\n\tto_formulae: to_formulae,\n\tto_md: to_md,\n\tto_dif: to_dif,\n\tto_sylk: to_sylk,\n\tto_socialcalc: to_socialcalc,\n\tget_cols: get_cols\n};\nvar J = {\n\tXLSX: XLSX,\n\tXLS: XLS,\n\treadFile:readFileSync,\n\tread:read,\n\tutils: utils,\n\tversion: version\n};\n\nif(typeof module !== 'undefined') module.exports = J;\n"}